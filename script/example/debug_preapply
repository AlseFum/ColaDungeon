#!/usr/bin/env node
import { scan_workspace, scan_modules, scan_task_js, scan_task_md } from './script/lib/scan.js';
import { scanresult2locations, evaluate_module, preapply_module } from './script/lib/service.js';
import { reify_task } from './script/lib/service.js';
async function main() {
  const root = process.cwd();
  console.log('=== Debug Preapply Flow ===');

  console.log('\n1. Scanning workspace...');
  const scanRes = await scan_workspace(root);
  console.log(' scanRes.locations count:', scanRes.locations.length);
  console.log(' scanRes.file_changes count:', scanRes.file_changes.length);
  console.log(' scanRes.templates count:', scanRes.templates.length);

  console.log('\n2. Converting scan results to location maps...');
  const locationsTuple = scanresult2locations(scanRes);
  console.log(' locationsTuple maps sizes:',
    locationsTuple[0].size, locationsTuple[1].size, locationsTuple[2].size, locationsTuple[3].size);

  console.log('\n3. Scanning modules...');
  const modules = await scan_modules(root);
  console.log(' Modules found:', modules.map(m => m.name));
  if (!modules.length) return;
  const mod = modules[0];
  console.log(' Using module:', mod.name);

  console.log('\n4. Scanning JS tasks...');
  const jsCollections = await scan_task_js(root);
  console.log(' JS task collections count:', jsCollections.length);
  const jsTasks = Object.assign({}, ...jsCollections);
  console.log(' JS taskSet keys:', Object.keys(jsTasks));

  console.log('\n5. Scanning MD tasks...');
  const mdCollections = await scan_task_md(root);
  console.log(' MD collections count:', mdCollections.length);
  const mdTasks = [];
  mdCollections.forEach(col => Object.values(col).forEach(arr => mdTasks.push(...arr)));
  console.log(' MD task identifiers:', mdTasks.map(t => t.identifier));

  const taskSet = { ...jsTasks, ...mdTasks.reduce((acc, t) => { acc[t.identifier] = t; return acc; }, {}) };
  console.log(' Combined taskSet size:', Object.keys(taskSet).length);

  console.log('\n6. Evaluating module...');
  const evalPlan = evaluate_module(mod, [], taskSet);
  evalPlan.forEach((p, idx) => console.log(` Batch ${idx+1}:`, p.batch));

  console.log('\n7. Preapplying module...');
  const preapplyRes = preapply_module(mod, [], taskSet);
  preapplyRes.forEach(({ batch, merged }, idx) => {
    console.log(` Batch ${idx+1}:`, batch);
    console.log('  Merged ops identifiers:', Object.keys(merged));
  });
  debugger;
}

main().catch(err => {
  console.error('Debug flow error:', err);
  process.exit(1);
}); 
async function testSubmitFile() {
  const tempDir = path.join(__dirname, 'tmp_test');
  await fs.rm(tempDir, { recursive: true, force: true });
  await fs.mkdir(tempDir, { recursive: true });

  const fileName = 'file.txt';
  const filePath = path.join(tempDir, fileName);
  const oldContent = 'hello old';
  await fs.writeFile(filePath, oldContent, 'utf-8');

  // Overwrite multiple times to generate backups
  const newContents = ['hello new', 'hello newer', 'hello latest', 'hello burfinal','hahahawhatareyouwaitingfor',"man!"];
  for (const newContent of newContents) {
    await submit_file(filePath, newContent);
  }

  const files = await fs.readdir(tempDir);
  const bakFiles = files.filter(f => f.startsWith(fileName + '.') && f.endsWith('.bak'));
  assert.strictEqual(bakFiles.length, newContents.length, 'Expected backups count matches overwrites');

  const diffContent = await fs.readFile(path.join(tempDir, '.diff.md'), 'utf-8');
  const diffLines = diffContent.trim().split(/\r?\n/);
  assert.strictEqual(diffLines[0], fileName, 'First line should be original file name');
  assert.strictEqual(diffLines.length, newContents.length + 1, 'Diff lines count should match backups +1');

  for (let i = 1; i < diffLines.length; i++) {
    assert(diffLines[i].startsWith('<-'), `Line ${i} should start with "<-"`);
  }

  const finalContent = await fs.readFile(filePath, 'utf-8');
  assert.strictEqual(finalContent, newContents[newContents.length - 1], 'Final file content should be last overwrite');

  // Skip cleanup for inspection
  await fs.rm(tempDir, { recursive: true, force: true });
}

async function runTests() {
  await testSubmitFile();
  console.log('All tests passed.');
}

runTests().catch(err => {
  console.error(err);
  process.exit(1);
});
